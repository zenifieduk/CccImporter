---
layout: layouts/base.njk
title: Classic Car Events | Classic Car Clubs
description: Find classic car events, rallies, shows, and gatherings near you. Browse our comprehensive calendar of classic car events across the UK and worldwide.
---

<div class="bg-dark-green text-white py-16">
  <div class="container mx-auto px-4 text-center">
    <h1 class="text-4xl md:text-5xl font-serif mb-4">Classic Car Events</h1>
    <p class="text-xl max-w-3xl mx-auto">Discover upcoming classic car shows, rallies, and gatherings. Join fellow enthusiasts and showcase your vehicle at these exciting events.</p>
  </div>
</div>

<div class="container mx-auto px-4 py-12" x-data="eventsDirectory">
  <!-- Search and Filters -->
  <div class="bg-light-cream p-6 rounded-lg mb-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <!-- Search bar -->
      <div>
        <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
        <div class="relative">
          <input 
            type="text" 
            id="search" 
            x-model="searchQuery"
            @input="search"
            placeholder="Search by event name or description" 
            class="w-full py-2 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent"
          >
          <button 
            class="absolute right-0 top-0 h-full px-3 text-gray-500"
            @click="searchQuery = ''; search()"
            x-show="searchQuery"
          >
            <span class="sr-only">Clear search</span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Category filter -->
      <div>
        <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
        <select 
          id="category" 
          x-model="filters.category"
          @change="filter"
          class="w-full py-2 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent"
        >
          <option value="">All Categories</option>
          <template x-for="category in availableFilters.categories" :key="category">
            <option :value="category" x-text="category"></option>
          </template>
        </select>
      </div>
      
      <!-- Month filter -->
      <div>
        <label for="month" class="block text-sm font-medium text-gray-700 mb-1">Month</label>
        <select 
          id="month" 
          x-model="filters.month"
          @change="filter"
          class="w-full py-2 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent"
        >
          <option value="">Any Month</option>
          <option value="01">January</option>
          <option value="02">February</option>
          <option value="03">March</option>
          <option value="04">April</option>
          <option value="05">May</option>
          <option value="06">June</option>
          <option value="07">July</option>
          <option value="08">August</option>
          <option value="09">September</option>
          <option value="10">October</option>
          <option value="11">November</option>
          <option value="12">December</option>
        </select>
      </div>
    </div>
  </div>
  
  <!-- Results Stats -->
  <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
    <div class="text-gray-600 mb-4 md:mb-0">
      <span x-text="filteredEvents.length"></span> events found
      <template x-if="filters.category">
        <span> in <span x-text="filters.category"></span></span>
      </template>
      <template x-if="filters.month">
        <span> in <span x-text="formatMonth(filters.month)"></span></span>
      </template>
      <template x-if="searchQuery">
        <span> matching '<span x-text="searchQuery"></span>'</span>
      </template>
    </div>
    
    <button 
      @click="resetFilters"
      class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent"
      x-show="isFiltered"
    >
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
      </svg>
      Reset Filters
    </button>
  </div>
  
  <template x-if="filteredEvents.length === 0">
    <div class="text-center py-12">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 text-gray-300 mx-auto mb-4">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5" />
      </svg>
      <h3 class="text-xl font-medium text-gray-900 mb-2">No events found</h3>
      <p class="text-gray-600 max-w-md mx-auto">
        We couldn't find any events matching your search criteria. Please try adjusting your filters or search term.
      </p>
      <button 
        @click="resetFilters"
        class="mt-4 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-dark-green hover:bg-light-green focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent"
      >
        Reset All Filters
      </button>
    </div>
  </template>
  
  <template x-if="filteredEvents.length > 0">
    <!-- Events List -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
      <template x-for="event in paginatedEvents" :key="event.id">
        <div>
          <div class="bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-200 hover:shadow-lg hover:-translate-y-1">
            <div class="aspect-w-16 h-48 relative">
              <img 
                :src="event.image || '/assets/images/placeholder-event.jpg'" 
                :alt="event.title"
                class="w-full h-full object-cover"
              >
              <template x-if="event.featured">
                <div class="absolute top-0 right-0 bg-accent text-dark-green px-3 py-1 font-medium">
                  Featured
                </div>
              </template>
              
              <div class="absolute bottom-0 left-0 bg-dark-green text-white p-2">
                <div class="text-center">
                  <span class="block text-xs font-medium" x-text="formatDay(event.date)"></span>
                  <template x-if="event.endDate && event.endDate !== event.date">
                    <span class="block text-sm font-bold" x-text="formatDay(event.date) + '-' + formatDay(event.endDate)"></span>
                  </template>
                </div>
              </div>
            </div>
            
            <div class="p-5">
              <h3 class="text-xl font-bold mb-2 font-serif text-dark-green">
                <a :href="'/events/' + event.slug + '/'" class="hover:text-light-green transition duration-150" x-text="event.title"></a>
              </h3>
              
              <p class="text-gray-600 mb-3 line-clamp-2" x-text="event.description"></p>
              
              <template x-if="event.location">
                <div class="flex items-start mb-3">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-dark-green mt-0.5 flex-shrink-0 mr-2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                  </svg>
                  <div class="text-sm text-gray-600">
                    <template x-if="event.location.name">
                      <span x-text="event.location.name + ', '"></span>
                    </template>
                    <template x-if="event.location.city">
                      <span x-text="event.location.city"></span>
                    </template>
                  </div>
                </div>
              </template>
              
              <template x-if="event.categories && event.categories.length > 0">
                <div class="flex flex-wrap gap-2 mb-4">
                  <template x-for="(category, index) in event.categories.slice(0, 2)" :key="index">
                    <span class="inline-block bg-light-cream text-dark-green text-xs py-1 px-2 rounded-full" x-text="category"></span>
                  </template>
                  
                  <template x-if="event.categories.length > 2">
                    <span class="inline-block bg-light-cream text-dark-green text-xs py-1 px-2 rounded-full" x-text="'+' + (event.categories.length - 2)"></span>
                  </template>
                </div>
              </template>
              
              <div class="flex justify-end">
                <a 
                  :href="'/events/' + event.slug + '/'" 
                  class="inline-block bg-accent hover:bg-accent-dark text-dark-green py-1 px-3 rounded text-sm uppercase tracking-wider font-serif transition duration-150"
                >
                  View Event
                </a>
              </div>
            </div>
          </div>
        </div>
      </template>
    </div>
    
    <!-- Pagination -->
    <template x-if="pageCount > 1">
      <div class="flex justify-center">
        <nav class="inline-flex rounded-md shadow-sm" aria-label="Pagination">
          <button
            @click="goToPage(currentPage - 1)"
            :disabled="currentPage === 1"
            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span class="sr-only">Previous</span>
            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
            <span class="ml-1 hidden sm:inline">Previous</span>
          </button>
          
          <template x-for="pageNumber in pageNumbers" :key="pageNumber">
            <button
              @click="goToPage(pageNumber)"
              :class="{
                'bg-dark-green text-white': pageNumber === currentPage,
                'bg-white text-gray-500 hover:bg-gray-50': pageNumber !== currentPage
              }"
              class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium focus:z-10 focus:outline-none focus:ring-1 focus:ring-accent focus:border-accent"
              x-text="pageNumber"
            ></button>
          </template>
          
          <button
            @click="goToPage(currentPage + 1)"
            :disabled="currentPage === pageCount"
            class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span class="mr-1 hidden sm:inline">Next</span>
            <span class="sr-only">Next</span>
            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10l-3.293-3.293a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </button>
        </nav>
      </div>
    </template>
  </template>

  <!-- Event Submission Banner -->
  <div class="mt-12 py-8 px-6 bg-light-cream rounded-lg flex flex-col md:flex-row items-center justify-between">
    <div class="md:w-2/3 mb-6 md:mb-0">
      <h2 class="text-2xl font-serif font-bold text-dark-green mb-2">Hosting a classic car event?</h2>
      <p class="text-gray-700">
        Submit your event details to be featured in our directory. Reach thousands of classic car enthusiasts across the country.
      </p>
    </div>
    <div>
      <a 
        href="/submit-event/" 
        class="inline-block bg-accent hover:bg-accent-dark text-dark-green py-3 px-6 rounded uppercase text-sm tracking-wider font-serif transition duration-150"
      >
        Submit Event
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('eventsDirectory', () => ({
      events: {{ mergedEvents | json | safe }},
      filteredEvents: [],
      searchQuery: '',
      filters: {
        category: '',
        month: ''
      },
      availableFilters: {
        categories: []
      },
      currentPage: 1,
      itemsPerPage: 9,
      
      init() {
        // Set initial filtered events
        this.filteredEvents = this.events;
        
        // Extract unique categories
        const allCategories = this.events.flatMap(event => event.categories || []);
        this.availableFilters.categories = [...new Set(allCategories)].sort();
      },
      
      filter() {
        let result = this.events;
        
        // Filter by category
        if (this.filters.category) {
          result = result.filter(event => 
            event.categories && event.categories.includes(this.filters.category)
          );
        }
        
        // Filter by month
        if (this.filters.month) {
          result = result.filter(event => {
            if (!event.date) return false;
            const eventDate = new Date(event.date);
            const eventMonth = (eventDate.getMonth() + 1).toString().padStart(2, '0');
            return eventMonth === this.filters.month;
          });
        }
        
        // Apply search query
        if (this.searchQuery.trim()) {
          const query = this.searchQuery.toLowerCase();
          result = result.filter(event => 
            event.title.toLowerCase().includes(query) || 
            (event.description && event.description.toLowerCase().includes(query))
          );
        }
        
        this.filteredEvents = result;
        this.currentPage = 1;
      },
      
      updateAvailableOptions(filtered) {
        // This could be implemented to dynamically update filter options
        // based on the current filtered results, but for simplicity we'll keep static options
      },
      
      search() {
        this.filter();
      },
      
      reset() {
        this.searchQuery = '';
        this.filters.category = '';
        this.filters.month = '';
        this.filteredEvents = this.events;
        this.currentPage = 1;
      },
      
      resetFilters() {
        this.reset();
      },
      
      formatMonth(monthStr) {
        const months = [
          'January', 'February', 'March', 'April', 'May', 'June', 
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
        const monthIndex = parseInt(monthStr, 10) - 1;
        return months[monthIndex];
      },
      
      formatDay(dateTimeString) {
        if (!dateTimeString) return '';
        const date = new Date(dateTimeString);
        return date.toLocaleString('en-GB', { 
          day: 'numeric', 
          month: 'short'
        });
      },
      
      formatTime(dateTimeString) {
        if (!dateTimeString) return '';
        const date = new Date(dateTimeString);
        return date.toLocaleString('en-GB', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: true
        });
      },
      
      paginate() {
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        return this.filteredEvents.slice(startIndex, endIndex);
      },
      
      goToPage(page) {
        if (page >= 1 && page <= this.pageCount) {
          this.currentPage = page;
        }
      },
      
      get pageCount() {
        return Math.ceil(this.filteredEvents.length / this.itemsPerPage);
      },
      
      get pageNumbers() {
        const pages = [];
        const maxVisiblePages = 5;
        
        if (this.pageCount <= maxVisiblePages) {
          // Show all pages if there are few
          for (let i = 1; i <= this.pageCount; i++) {
            pages.push(i);
          }
        } else {
          // Show a subset of pages with current page in the middle if possible
          let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
          let endPage = Math.min(this.pageCount, startPage + maxVisiblePages - 1);
          
          // Adjust if we're near the end
          if (endPage === this.pageCount) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
          }
          
          for (let i = startPage; i <= endPage; i++) {
            pages.push(i);
          }
        }
        
        return pages;
      },
      
      get paginatedEvents() {
        return this.paginate();
      },
      
      get startIndex() {
        return (this.currentPage - 1) * this.itemsPerPage + 1;
      },
      
      get endIndex() {
        return Math.min(this.startIndex + this.itemsPerPage - 1, this.filteredEvents.length);
      },
      
      get isFiltered() {
        return this.searchQuery || this.filters.category || this.filters.month;
      }
    }));
  });
</script>